
*** Assignment 3, A Calculator ***

Here we'll implement a (somewhat simplified) calculator. A command line run might look like:

    > 1 + 1
    2.0
    > 2 / 3
    0.6666666666666666
    >  1 + 2 * 3
    7.0
    >  (1 + 2) * 3
    9.0
    > 2 ^ 2 + 3
    7.0
    bye

If new to programming you should have done the exercises
- week4: 1-4

Files
-----
Calculator, the Calculator you are going to implement
CalculatorGUI, a graphical user interface (Nothing to do, but need JavaFX)
REPL, Commandline interface for the Calculator (Nothing to do)
Test, the tests for the Calculator (You use)
WebCalcServer, a server to make it possible to do calculations ont the web (Nothing to do)


General
-------
For theoretical background Lab3Calc.pdf

To get the result a series of operations (method calls) are carried out. Starting
out with an arithmetical expression (a String) the flow is:

read expression -> tokenize (break up into parts) -> infix to postfix conversion ->
                evaluation (calculate a value) -> print result (a double)

Each operation tokenize, infix to postfix and evaluation is performed by a method. We implement
and test one method at the time. See method calls from method eval() in Calculator

For all methods: They are all complex! Use functional decomposition. Some (helper) methods are given!

  *** NO method may contain nested loops! ***
  - If need for nested loops, separate into own methods

 Use existing tests in Test-file. Possible add own test.

TIP: Reuse from exercises?

Recommended Process
-------------------
Inspect given code carefully! There are things to use. Try to use as much code as possible
from Java's API (don't reinvent the wheel).

1.  Implement the method tokenize. The method takes a string and breaks it up into tokens.
    A token is a number, an operator or a parentheses (left or right), all represented as Strings.
    The tokens are returned as a list of String, see tests at "tokenization" in file Test.
    Uncomment and run tests, one at the time!

    NOTE: No control of input here and no exceptions here. Will be handled later.
    (we assume somewhat sensible input, but possible typing errors)

2.  Implement method infix2postfix. This method converts a String list in infix
    form to a String list in postfix form. You need a Stack and a List (for the output).
    See https://en.wikipedia.org/wiki/Shunting-yard_algorithm
    Here's a video for the algorithm (there are many more): https://www.youtube.com/watch?v=vXPL6UavUeA

3.  Implement the evalPostFix method. Method takes an expression in the form of an postfix String list
    and produces the result, a double.

    When all test pass you should be able to run CalculatorGUI, REPL and the WebCalcServer. Test it!

4.  (Optional) Add negative and/or real numbers!

